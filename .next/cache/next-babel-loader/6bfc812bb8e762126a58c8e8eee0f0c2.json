{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { GET_USER_INFO, GET_USER_INFO_COMPLETE, GET_USER_INFO_ERROR, EDIT_USER_INFO, EDIT_USER_INFO_COMPLETE, EDIT_USER_INFO_ERROR } from \"../constants\";\nconst baseUrl = \"https://api.tavanito.ir/v2\"; // export const getUserInfo = token => {\n//   return {\n//     type: GET_USER_INFO,\n//     token\n//   };\n// };\n// export const editUserInfo = (token, data) => {\n//   return {\n//     type: EDIT_USER_INFO,\n//     token,\n//     data\n//   };\n// };\n\nexport const getUserInfo = token => {\n  let uri = `${baseUrl}/user`;\n  return dispatch => {\n    dispatch(() => ({\n      type: GET_USER_INFO\n    }));\n    fetch(uri, {\n      method: \"GET\",\n      headers: {\n        Authorization: token ? `Bearer ${token}` : \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => {\n      dispatch(() => ({\n        type: GET_USER_INFO_COMPLETE,\n        data: res.data\n      }));\n    }).catch(err => {\n      dispatch(() => ({\n        type: GET_USER_INFO_ERROR,\n        err\n      }));\n    });\n  };\n}; //***********************************************\n\nexport const editUserInfo = (token, data) => {\n  let uri = `${baseUrl}/user`;\n  return dispatch => {\n    dispatch(() => ({\n      type: EDIT_USER_INFO\n    }));\n    fetch(uri, {\n      method: \"PUT\",\n      body: _JSON$stringify(data),\n      headers: {\n        Authorization: token ? `Bearer ${token}` : \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => {\n      dispatch(() => ({\n        type: EDIT_USER_INFO_COMPLETE,\n        data: res.data\n      }));\n    }).catch(err => {\n      dispatch(() => ({\n        type: EDIT_USER_INFO_ERROR,\n        err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["G:/projects/nextjs-tavanito/src/actions/profileActions.js"],"names":["GET_USER_INFO","GET_USER_INFO_COMPLETE","GET_USER_INFO_ERROR","EDIT_USER_INFO","EDIT_USER_INFO_COMPLETE","EDIT_USER_INFO_ERROR","baseUrl","getUserInfo","token","uri","dispatch","type","fetch","method","headers","Authorization","then","res","json","data","catch","err","editUserInfo","body"],"mappings":";AAAA,SACEA,aADF,EACiBC,sBADjB,EACyCC,mBADzC,EAEEC,cAFF,EAEkBC,uBAFlB,EAE2CC,oBAF3C,QAGO,cAHP;AAKA,MAAMC,OAAO,GAAG,4BAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAEpC,MAAIC,GAAG,GAAI,GAAEH,OAAQ,OAArB;AAEA,SAAOI,QAAQ,IAAI;AAEjBA,IAAAA,QAAQ,CAAC,OAAO;AACdC,MAAAA,IAAI,EAAEX;AADQ,KAAP,CAAD,CAAR;AAIAY,IAAAA,KAAK,CAACH,GAAD,EAAM;AACTI,MAAAA,MAAM,EAAE,KADC;AAGTC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEP,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADpC;AAEP,wBAAgB;AAFT;AAHA,KAAN,CAAL,CAOGQ,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EASGF,IATH,CASQC,GAAG,IAAI;AACXP,MAAAA,QAAQ,CAAC,OAAO;AACdC,QAAAA,IAAI,EAAEV,sBADQ;AACgBkB,QAAAA,IAAI,EAAEF,GAAG,CAACE;AAD1B,OAAP,CAAD,CAAR;AAGD,KAbH,EAcGC,KAdH,CAcSC,GAAG,IAAI;AACZX,MAAAA,QAAQ,CAAC,OAAO;AACdC,QAAAA,IAAI,EAAET,mBADQ;AACamB,QAAAA;AADb,OAAP,CAAD,CAAR;AAGD,KAlBH;AAmBD,GAzBD;AA0BD,CA9BM,C,CAgCP;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACd,KAAD,EAAQW,IAAR,KAAiB;AAE3C,MAAIV,GAAG,GAAI,GAAEH,OAAQ,OAArB;AAEA,SAAOI,QAAQ,IAAI;AAEjBA,IAAAA,QAAQ,CAAC,OAAO;AACdC,MAAAA,IAAI,EAAER;AADQ,KAAP,CAAD,CAAR;AAIAS,IAAAA,KAAK,CAACH,GAAD,EAAM;AACTI,MAAAA,MAAM,EAAE,KADC;AAETU,MAAAA,IAAI,EAAE,gBAAeJ,IAAf,CAFG;AAGTL,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEP,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADpC;AAEP,wBAAgB;AAFT;AAHA,KAAN,CAAL,CAOGQ,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EASGF,IATH,CASQC,GAAG,IAAI;AACXP,MAAAA,QAAQ,CAAC,OAAO;AACdC,QAAAA,IAAI,EAAEP,uBADQ;AACiBe,QAAAA,IAAI,EAAEF,GAAG,CAACE;AAD3B,OAAP,CAAD,CAAR;AAGD,KAbH,EAcGC,KAdH,CAcSC,GAAG,IAAI;AACZX,MAAAA,QAAQ,CAAC,OAAO;AACdC,QAAAA,IAAI,EAAEN,oBADQ;AACcgB,QAAAA;AADd,OAAP,CAAD,CAAR;AAGD,KAlBH;AAmBD,GAzBD;AA0BD,CA9BM","sourcesContent":["import {\r\n  GET_USER_INFO, GET_USER_INFO_COMPLETE, GET_USER_INFO_ERROR,\r\n  EDIT_USER_INFO, EDIT_USER_INFO_COMPLETE, EDIT_USER_INFO_ERROR\r\n} from \"../constants\";\r\n\r\nconst baseUrl = \"https://api.tavanito.ir/v2\";\r\n\r\n// export const getUserInfo = token => {\r\n//   return {\r\n//     type: GET_USER_INFO,\r\n//     token\r\n//   };\r\n// };\r\n\r\n// export const editUserInfo = (token, data) => {\r\n//   return {\r\n//     type: EDIT_USER_INFO,\r\n//     token,\r\n//     data\r\n//   };\r\n// };\r\n\r\nexport const getUserInfo = (token) => {\r\n\r\n  let uri = `${baseUrl}/user`;\r\n\r\n  return dispatch => {\r\n\r\n    dispatch(() => ({\r\n      type: GET_USER_INFO\r\n    }));\r\n\r\n    fetch(uri, {\r\n      method: \"GET\",\r\n\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : \"\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(res => res.json())\r\n\r\n      .then(res => {\r\n        dispatch(() => ({\r\n          type: GET_USER_INFO_COMPLETE, data: res.data\r\n        }))\r\n      })\r\n      .catch(err => {\r\n        dispatch(() => ({\r\n          type: GET_USER_INFO_ERROR, err\r\n        }));\r\n      });\r\n  };\r\n};\r\n\r\n//***********************************************\r\n\r\nexport const editUserInfo = (token, data) => {\r\n\r\n  let uri = `${baseUrl}/user`;\r\n\r\n  return dispatch => {\r\n\r\n    dispatch(() => ({\r\n      type: EDIT_USER_INFO\r\n    }));\r\n\r\n    fetch(uri, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : \"\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(res => res.json())\r\n\r\n      .then(res => {\r\n        dispatch(() => ({\r\n          type: EDIT_USER_INFO_COMPLETE, data: res.data\r\n        }))\r\n      })\r\n      .catch(err => {\r\n        dispatch(() => ({\r\n          type: EDIT_USER_INFO_ERROR, err\r\n        }));\r\n      });\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}