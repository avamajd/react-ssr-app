{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { LOGIN, SET_USERNAME, SET_USERNAME_ERROR, SET_TOKEN, SET_TOKEN_COMPLETE, SET_TOKEN_ERROR, LOGOUT, LOGIN_ERROR } from \"../constants\";\nconst baseUrl = \"https://api.tavanito.ir/v2\"; // export const login = username => {\n//   return {\n//     type: LOGIN,\n//     username\n//   };\n// };\n// // send otp and fetch token\n// export const setToken = otp => {\n//   return {\n//     type: SET_TOKEN,\n//     otp\n//   };\n// };\n\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};\nexport const login = mobile => {\n  let uri = `${baseUrl}/login/otp`;\n  return dispatch => {\n    dispatch(() => {\n      return {\n        type: LOGIN\n      };\n    });\n    fetch(uri, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: _JSON$stringify({\n        mobile\n      })\n    }) // .then(res => res.json())\n    .then(res => {\n      res.json().then(res => {\n        console.log(\"here\", res);\n\n        if (res.message) {\n          dispatch(() => {\n            return {\n              type: SET_USERNAME,\n              username: mobile,\n              message: res.message\n            };\n          });\n        } else if (res.errors && res.errors.mobile.length !== 0) dispatch(() => {\n          return {\n            type: SET_USERNAME_ERROR,\n            error: res.errors.mobile[0]\n          };\n        });\n      });\n    }).catch(err => {\n      dispatch(() => ({\n        type: SET_USERNAME_ERROR,\n        err\n      }));\n    });\n  };\n}; //*******************************************\n\nexport const setToken = otp => {\n  const mobile = getState.username;\n  let uri = `${baseUrl}/login?mobile=${mobile}&code=${otp}`;\n  return (dispatch, getState) => {\n    dispatch(() => ({\n      type: SET_TOKEN\n    }));\n    fetch(uri, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: _JSON$stringify({\n        mobile\n      })\n    }).then(res => res.json()).then(res => {\n      if (res.access_token && res.access_token !== \"\") {\n        dispatch(() => ({\n          type: SET_TOKEN_COMPLETE,\n          token: result.access_token\n        }));\n        dispatch(() => ({\n          type: LOGIN_COMPLETE\n        }));\n      } else if (res.errors && res.errors.mobile.length !== 0) {\n        dispatch(() => ({\n          type: SET_TOKEN_ERROR,\n          error: res.errors.mobile[0]\n        }));\n        dispatch(() => ({\n          type: LOGIN_ERROR\n        }));\n      }\n    }).catch(err => {\n      dispatch(() => ({\n        type: SET_TOKEN_ERROR,\n        err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["G:/projects/nextjs-tavanito/src/actions/authActions.js"],"names":["LOGIN","SET_USERNAME","SET_USERNAME_ERROR","SET_TOKEN","SET_TOKEN_COMPLETE","SET_TOKEN_ERROR","LOGOUT","LOGIN_ERROR","baseUrl","logout","type","login","mobile","uri","dispatch","fetch","method","headers","Accept","body","then","res","json","console","log","message","username","errors","length","error","catch","err","setToken","otp","getState","access_token","token","result","LOGIN_COMPLETE"],"mappings":"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","sourcesContent":["import { LOGIN, SET_USERNAME, SET_USERNAME_ERROR, SET_TOKEN, SET_TOKEN_COMPLETE, SET_TOKEN_ERROR, LOGOUT, LOGIN_ERROR } from \"../constants\";\r\n\r\nconst baseUrl = \"https://api.tavanito.ir/v2\";\r\n\r\n// export const login = username => {\r\n//   return {\r\n//     type: LOGIN,\r\n//     username\r\n//   };\r\n// };\r\n\r\n// // send otp and fetch token\r\n// export const setToken = otp => {\r\n//   return {\r\n//     type: SET_TOKEN,\r\n//     otp\r\n//   };\r\n// };\r\n\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT\r\n  };\r\n};\r\n\r\nexport const login = (mobile) => {\r\n\r\n  let uri = `${baseUrl}/login/otp`;\r\n\r\n  return dispatch => {\r\n    dispatch(() => {\r\n      return {\r\n        type: LOGIN\r\n      }\r\n    }\r\n    )\r\n\r\n    fetch(uri, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        mobile\r\n      })\r\n    })\r\n      // .then(res => res.json())\r\n      .then(res => {\r\n        res.json().then(res => {\r\n          console.log(\"here\", res)\r\n          if (res.message) {\r\n            dispatch(() => {\r\n              return {\r\n                type: SET_USERNAME, username: mobile, message: res.message\r\n              }\r\n            })\r\n          }\r\n          else if (res.errors && res.errors.mobile.length !== 0)\r\n            dispatch(() => {\r\n              return {\r\n                type: SET_USERNAME_ERROR, error: res.errors.mobile[0]\r\n              }\r\n            })\r\n        })\r\n      })\r\n      .catch(err => {\r\n        dispatch(() => ({\r\n          type: SET_USERNAME_ERROR, err\r\n        }));\r\n      });\r\n  };\r\n};\r\n\r\n//*******************************************\r\n\r\nexport const setToken = (otp) => {\r\n  const mobile = getState.username\r\n\r\n  let uri = `${baseUrl}/login?mobile=${mobile}&code=${otp}`;\r\n\r\n  return (dispatch, getState) => {\r\n    dispatch(() => ({\r\n      type: SET_TOKEN\r\n    })\r\n    )\r\n\r\n    fetch(uri, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        mobile\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.access_token && res.access_token !== \"\") {\r\n          dispatch(() => ({\r\n            type: SET_TOKEN_COMPLETE, token: result.access_token\r\n          }))\r\n          dispatch(() => ({\r\n            type: LOGIN_COMPLETE\r\n          }))\r\n        }\r\n        else if (res.errors && res.errors.mobile.length !== 0) {\r\n          dispatch(() => ({\r\n            type: SET_TOKEN_ERROR, error: res.errors.mobile[0]\r\n          }))\r\n          dispatch(() => ({\r\n            type: LOGIN_ERROR\r\n          }))\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        dispatch(() => ({\r\n          type: SET_TOKEN_ERROR, err\r\n        }));\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}