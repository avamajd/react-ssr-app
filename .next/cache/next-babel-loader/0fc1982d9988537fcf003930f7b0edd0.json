{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { LOGIN, LOGIN_COMPLETE, LOGIN_ERROR, SET_USERNAME, SET_USERNAME_ERROR, SET_TOKEN, SET_TOKEN_COMPLETE, SET_TOKEN_ERROR, LOGOUT } from \"../constants\";\nimport thunk from \"redux-thunk\";\nconst baseUrl = \"https://api.tavanito.ir/v2\"; //******************************************\n\nconst loginReq = () => ({\n  type: LOGIN\n});\n\nconst setUsername = (mobile, message) => ({\n  type: SET_USERNAME,\n  username: mobile,\n  message\n});\n\nconst setUsernameError = error => ({\n  type: SET_USERNAME_ERROR,\n  error\n});\n\nexport const login = mobile => {\n  let uri = `${baseUrl}/login/otp`;\n  return dispatch => {\n    dispatch(loginReq());\n    fetch(uri, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: _JSON$stringify({\n        mobile\n      })\n    }).then(res => {\n      res.json().then(res => {\n        if (res.message) {\n          dispatch(setUsername(mobile, res.message));\n        } else if (res.errors && res.errors.mobile.length !== 0) dispatch(setUsernameError(res.errors.mobile[0]));\n      });\n    }).catch(err => {\n      dispatch(setUsernameError(err));\n    });\n  };\n}; //*******************************************\n\nconst setTokenReq = () => ({\n  type: SET_TOKEN\n});\n\nconst setTokenComplete = token => ({\n  type: SET_TOKEN_COMPLETE,\n  token\n});\n\nconst loginComplete = () => ({\n  type: LOGIN_COMPLETE\n});\n\nconst setTokenError = error => ({\n  type: SET_TOKEN_ERROR,\n  error\n});\n\nconst loginError = () => ({\n  type: LOGIN_ERROR\n});\n\nexport const setToken = otp => {\n  return (dispatch, getState) => {\n    const mobile = getState().auth.username;\n    let uri = `${baseUrl}/login?mobile=${mobile}&code=${otp}`;\n    dispatch(setTokenReq());\n    fetch(uri, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: _JSON$stringify({\n        mobile\n      })\n    }).then(res => res.json()).then(res => {\n      if (res.access_token && res.access_token !== \"\") {\n        dispatch(setTokenComplete(res.access_token));\n        dispatch(loginComplete());\n      } else if (res.errors && res.errors.mobile.length !== 0) {\n        dispatch(setTokenError(res.errors.mobile[0]));\n        dispatch(loginError());\n      }\n    }).catch(err => {\n      dispatch(setTokenError(err));\n    });\n  };\n}; //******************************************\n\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};","map":{"version":3,"sources":["G:/projects/nextjs-tavanito/src/actions/authActions.js"],"names":["LOGIN","LOGIN_COMPLETE","LOGIN_ERROR","SET_USERNAME","SET_USERNAME_ERROR","SET_TOKEN","SET_TOKEN_COMPLETE","SET_TOKEN_ERROR","LOGOUT","thunk","baseUrl","loginReq","type","setUsername","mobile","message","username","setUsernameError","error","login","uri","dispatch","fetch","method","headers","Accept","body","then","res","json","errors","length","catch","err","setTokenReq","setTokenComplete","token","loginComplete","setTokenError","loginError","setToken","otp","getState","auth","access_token","logout"],"mappings":"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","sourcesContent":["import {\r\n  LOGIN, LOGIN_COMPLETE, LOGIN_ERROR,\r\n  SET_USERNAME, SET_USERNAME_ERROR,\r\n  SET_TOKEN, SET_TOKEN_COMPLETE, SET_TOKEN_ERROR,\r\n  LOGOUT,\r\n} from \"../constants\";\r\n\r\nimport thunk from \"redux-thunk\"\r\n\r\nconst baseUrl = \"https://api.tavanito.ir/v2\";\r\n\r\n\r\n//******************************************\r\n\r\nconst loginReq = () => ({\r\n  type: LOGIN\r\n})\r\n\r\nconst setUsername = (mobile, message) => ({\r\n  type: SET_USERNAME,\r\n  username: mobile,\r\n  message\r\n})\r\n\r\nconst setUsernameError = (error) => ({\r\n  type: SET_USERNAME_ERROR,\r\n  error\r\n})\r\n\r\nexport const login = (mobile) => {\r\n\r\n  let uri = `${baseUrl}/login/otp`;\r\n\r\n  return dispatch => {\r\n    dispatch(loginReq())\r\n\r\n    fetch(uri, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        mobile\r\n      })\r\n    })\r\n      .then(res => {\r\n        res.json().then(res => {\r\n          if (res.message) {\r\n            dispatch(setUsername(mobile, res.message))\r\n          }\r\n          else if (res.errors && res.errors.mobile.length !== 0)\r\n            dispatch(setUsernameError(res.errors.mobile[0]))\r\n        })\r\n      })\r\n      .catch(err => {\r\n        dispatch(setUsernameError(err));\r\n      });\r\n  };\r\n};\r\n\r\n//*******************************************\r\n\r\nconst setTokenReq = () => ({\r\n  type: SET_TOKEN\r\n})\r\n\r\nconst setTokenComplete = (token) => ({\r\n  type: SET_TOKEN_COMPLETE,\r\n  token\r\n})\r\n\r\nconst loginComplete = () => ({\r\n  type: LOGIN_COMPLETE\r\n})\r\n\r\nconst setTokenError = (error) => ({\r\n  type: SET_TOKEN_ERROR,\r\n  error\r\n})\r\n\r\nconst loginError = () => ({\r\n  type: LOGIN_ERROR\r\n})\r\n\r\nexport const setToken = (otp) => {\r\n  return (dispatch, getState) => {\r\n\r\n    const mobile = getState().auth.username\r\n\r\n    let uri = `${baseUrl}/login?mobile=${mobile}&code=${otp}`;\r\n\r\n    dispatch(setTokenReq())\r\n\r\n    fetch(uri, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        mobile\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.access_token && res.access_token !== \"\") {\r\n          dispatch(setTokenComplete(res.access_token))\r\n          dispatch(loginComplete())\r\n        }\r\n        else if (res.errors && res.errors.mobile.length !== 0) {\r\n          dispatch(setTokenError(res.errors.mobile[0]))\r\n          dispatch(loginError())\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        dispatch(setTokenError(err));\r\n      });\r\n  };\r\n};\r\n\r\n//******************************************\r\n\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT\r\n  };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}