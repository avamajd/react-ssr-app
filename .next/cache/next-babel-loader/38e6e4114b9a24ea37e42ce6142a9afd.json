{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { GET_USER_INFO, GET_USER_INFO_COMPLETE, GET_USER_INFO_ERROR, EDIT_USER_INFO, EDIT_USER_INFO_COMPLETE, EDIT_USER_INFO_ERROR } from \"../constants\";\nconst baseUrl = \"https://api.tavanito.ir/v2\"; // export const getUserInfo = token => {\n//   return {\n//     type: GET_USER_INFO,\n//     token\n//   };\n// };\n// export const editUserInfo = (token, data) => {\n//   return {\n//     type: EDIT_USER_INFO,\n//     token,\n//     data\n//   };\n// };\n\nconst getUserInfoReq = () => ({\n  type: GET_USER_INFO\n});\n\nconst getUserInfoComplete = data => ({\n  type: GET_USER_INFO_COMPLETE,\n  data\n});\n\nconst getUserInfoError = error => ({\n  type: GET_USER_INFO_ERROR,\n  error\n});\n\nexport const getUserInfo = token => {\n  let uri = `${baseUrl}/user`;\n  return dispatch => {\n    dispatch(getUserInfoReq());\n    fetch(uri, {\n      method: \"GET\",\n      headers: {\n        Authorization: token ? `Bearer ${token}` : \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => {\n      dispatch(getUserInfoComplete(res.data));\n    }).catch(err => {\n      dispatch(getUserInfoError(err));\n    });\n  };\n}; //***********************************************\n\nconst editUserInfoReq = () => ({\n  type: EDIT_USER_INFO\n});\n\nconst editUserInfoComplete = data => ({\n  type: EDIT_USER_INFO_COMPLETE,\n  data\n});\n\nconst editUserInfoError = error => ({\n  type: EDIT_USER_INFO_ERROR,\n  error\n});\n\nexport const editUserInfo = (token, data) => {\n  let uri = `${baseUrl}/user`;\n  return dispatch => {\n    dispatch(editUserInfoReq());\n    fetch(uri, {\n      method: \"PUT\",\n      body: _JSON$stringify(data),\n      headers: {\n        Authorization: token ? `Bearer ${token}` : \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => {\n      dispatch(editUserInfoComplete(res.data));\n    }).catch(err => {\n      dispatch(editUserInfoError(err));\n    });\n  };\n};","map":{"version":3,"sources":["G:/projects/nextjs-tavanito/src/actions/profileActions.js"],"names":["GET_USER_INFO","GET_USER_INFO_COMPLETE","GET_USER_INFO_ERROR","EDIT_USER_INFO","EDIT_USER_INFO_COMPLETE","EDIT_USER_INFO_ERROR","baseUrl","getUserInfoReq","type","getUserInfoComplete","data","getUserInfoError","error","getUserInfo","token","uri","dispatch","fetch","method","headers","Authorization","then","res","json","catch","err","editUserInfoReq","editUserInfoComplete","editUserInfoError","editUserInfo","body"],"mappings":";AAAA,SACEA,aADF,EACiBC,sBADjB,EACyCC,mBADzC,EAEEC,cAFF,EAEkBC,uBAFlB,EAE2CC,oBAF3C,QAGO,cAHP;AAKA,MAAMC,OAAO,GAAG,4BAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,OAAO;AAC5BC,EAAAA,IAAI,EAAER;AADsB,CAAP,CAAvB;;AAIA,MAAMS,mBAAmB,GAAIC,IAAD,KAAW;AACrCF,EAAAA,IAAI,EAAEP,sBAD+B;AAErCS,EAAAA;AAFqC,CAAX,CAA5B;;AAKA,MAAMC,gBAAgB,GAAIC,KAAD,KAAY;AACnCJ,EAAAA,IAAI,EAAEN,mBAD6B;AAEnCU,EAAAA;AAFmC,CAAZ,CAAzB;;AAKA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAEpC,MAAIC,GAAG,GAAI,GAAET,OAAQ,OAArB;AAEA,SAAOU,QAAQ,IAAI;AAEjBA,IAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AAEAU,IAAAA,KAAK,CAACF,GAAD,EAAM;AACTG,MAAAA,MAAM,EAAE,KADC;AAGTC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEN,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADpC;AAEP,wBAAgB;AAFT;AAHA,KAAN,CAAL,CAOGO,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EASGF,IATH,CASQC,GAAG,IAAI;AACXN,MAAAA,QAAQ,CAACP,mBAAmB,CAACa,GAAG,CAACZ,IAAL,CAApB,CAAR;AACD,KAXH,EAYGc,KAZH,CAYSC,GAAG,IAAI;AACZT,MAAAA,QAAQ,CAACL,gBAAgB,CAACc,GAAD,CAAjB,CAAR;AACD,KAdH;AAeD,GAnBD;AAoBD,CAxBM,C,CA0BP;;AAEA,MAAMC,eAAe,GAAG,OAAO;AAC7BlB,EAAAA,IAAI,EAAEL;AADuB,CAAP,CAAxB;;AAIA,MAAMwB,oBAAoB,GAAIjB,IAAD,KAAW;AACtCF,EAAAA,IAAI,EAAEJ,uBADgC;AAEtCM,EAAAA;AAFsC,CAAX,CAA7B;;AAKA,MAAMkB,iBAAiB,GAAIhB,KAAD,KAAY;AACpCJ,EAAAA,IAAI,EAAEH,oBAD8B;AAEpCO,EAAAA;AAFoC,CAAZ,CAA1B;;AAKA,OAAO,MAAMiB,YAAY,GAAG,CAACf,KAAD,EAAQJ,IAAR,KAAiB;AAE3C,MAAIK,GAAG,GAAI,GAAET,OAAQ,OAArB;AAEA,SAAOU,QAAQ,IAAI;AAEjBA,IAAAA,QAAQ,CAACU,eAAe,EAAhB,CAAR;AAEAT,IAAAA,KAAK,CAACF,GAAD,EAAM;AACTG,MAAAA,MAAM,EAAE,KADC;AAETY,MAAAA,IAAI,EAAE,gBAAepB,IAAf,CAFG;AAGTS,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEN,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADpC;AAEP,wBAAgB;AAFT;AAHA,KAAN,CAAL,CAOGO,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EASGF,IATH,CASQC,GAAG,IAAI;AACXN,MAAAA,QAAQ,CAACW,oBAAoB,CAACL,GAAG,CAACZ,IAAL,CAArB,CAAR;AACD,KAXH,EAYGc,KAZH,CAYSC,GAAG,IAAI;AACZT,MAAAA,QAAQ,CAACY,iBAAiB,CAACH,GAAD,CAAlB,CAAR;AACD,KAdH;AAeD,GAnBD;AAoBD,CAxBM","sourcesContent":["import {\r\n  GET_USER_INFO, GET_USER_INFO_COMPLETE, GET_USER_INFO_ERROR,\r\n  EDIT_USER_INFO, EDIT_USER_INFO_COMPLETE, EDIT_USER_INFO_ERROR\r\n} from \"../constants\";\r\n\r\nconst baseUrl = \"https://api.tavanito.ir/v2\";\r\n\r\n// export const getUserInfo = token => {\r\n//   return {\r\n//     type: GET_USER_INFO,\r\n//     token\r\n//   };\r\n// };\r\n\r\n// export const editUserInfo = (token, data) => {\r\n//   return {\r\n//     type: EDIT_USER_INFO,\r\n//     token,\r\n//     data\r\n//   };\r\n// };\r\n\r\nconst getUserInfoReq = () => ({\r\n  type: GET_USER_INFO\r\n})\r\n\r\nconst getUserInfoComplete = (data) => ({\r\n  type: GET_USER_INFO_COMPLETE,\r\n  data\r\n})\r\n\r\nconst getUserInfoError = (error) => ({\r\n  type: GET_USER_INFO_ERROR,\r\n  error\r\n})\r\n\r\nexport const getUserInfo = (token) => {\r\n\r\n  let uri = `${baseUrl}/user`;\r\n\r\n  return dispatch => {\r\n\r\n    dispatch(getUserInfoReq());\r\n\r\n    fetch(uri, {\r\n      method: \"GET\",\r\n\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : \"\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(res => res.json())\r\n\r\n      .then(res => {\r\n        dispatch(getUserInfoComplete(res.data))\r\n      })\r\n      .catch(err => {\r\n        dispatch(getUserInfoError(err))\r\n      });\r\n  };\r\n};\r\n\r\n//***********************************************\r\n\r\nconst editUserInfoReq = () => ({\r\n  type: EDIT_USER_INFO\r\n})\r\n\r\nconst editUserInfoComplete = (data) => ({\r\n  type: EDIT_USER_INFO_COMPLETE,\r\n  data\r\n})\r\n\r\nconst editUserInfoError = (error) => ({\r\n  type: EDIT_USER_INFO_ERROR,\r\n  error\r\n})\r\n\r\nexport const editUserInfo = (token, data) => {\r\n\r\n  let uri = `${baseUrl}/user`;\r\n\r\n  return dispatch => {\r\n\r\n    dispatch(editUserInfoReq());\r\n\r\n    fetch(uri, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        Authorization: token ? `Bearer ${token}` : \"\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(res => res.json())\r\n\r\n      .then(res => {\r\n        dispatch(editUserInfoComplete(res.data))\r\n      })\r\n      .catch(err => {\r\n        dispatch(editUserInfoError(err));\r\n      });\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}