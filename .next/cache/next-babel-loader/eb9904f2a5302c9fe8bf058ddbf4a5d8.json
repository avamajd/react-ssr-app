{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"G:\\\\projects\\\\nextjs-tavanito\\\\pages\\\\_document.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheets } from \"@material-ui/core/styles\";\n\nclass _Document extends Document {\n  render() {\n    return __jsx(Html, {\n      lang: \"fa\",\n      dir: \"rtl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, __jsx(\"meta\", {\n      charSet: \"utf-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    })), __jsx(\"body\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, __jsx(Main, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), __jsx(NextScript, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    })));\n  }\n\n}\n\n_Document.getInitialProps = async ctx => {\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx); // Check if in production\n\n  const isProduction = false;\n  return _objectSpread({}, initialProps, {\n    isProduction,\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [__jsx(React.Fragment, {\n      key: \"styles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, initialProps.styles, sheets.getStyleElement())]\n  });\n};\n\nexport default _Document;","map":{"version":3,"sources":["G:/projects/nextjs-tavanito/pages/_document.js"],"names":["React","Document","Html","Head","Main","NextScript","ServerStyleSheets","_Document","render","getInitialProps","ctx","sheets","originalRenderPage","renderPage","enhanceApp","App","props","collect","initialProps","isProduction","styles","getStyleElement"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,eAAvD;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;AAEA,MAAMC,SAAN,SAAwBN,QAAxB,CAAiC;AAC/BO,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,IAAX;AAAgB,MAAA,GAAG,EAAC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,OAAO,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAC,wEAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CATF,CADF;AAgBD;;AAlB8B;;AAqBjCD,SAAS,CAACE,eAAV,GAA4B,MAAMC,GAAN,IAAa;AACvC;AACA,QAAMC,MAAM,GAAG,IAAIL,iBAAJ,EAAf;AACA,QAAMM,kBAAkB,GAAGF,GAAG,CAACG,UAA/B;;AAEAH,EAAAA,GAAG,CAACG,UAAJ,GAAiB,MACfD,kBAAkB,CAAC;AACjBE,IAAAA,UAAU,EAAEC,GAAG,IAAIC,KAAK,IAAIL,MAAM,CAACM,OAAP,CAAe,MAAC,GAAD,eAASD,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAf;AADX,GAAD,CADpB;;AAKA,QAAME,YAAY,GAAG,MAAMjB,QAAQ,CAACQ,eAAT,CAAyBC,GAAzB,CAA3B,CAVuC,CAYvC;;AACA,QAAMS,YAAY,QAAlB;AAEA,2BACKD,YADL;AAEEC,IAAAA,YAFF;AAGE;AACAC,IAAAA,MAAM,EAAE,CACN,MAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,YAAY,CAACE,MADhB,EAEGT,MAAM,CAACU,eAAP,EAFH,CADM;AAJV;AAWD,CA1BD;;AA4BA,eAAed,SAAf","sourcesContent":["import React from \"react\";\r\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\r\nimport { ServerStyleSheets } from \"@material-ui/core/styles\";\r\n\r\nclass _Document extends Document {\r\n  render() {\r\n    return (\r\n      <Html lang=\"fa\" dir=\"rtl\">\r\n        <Head>\r\n          <meta charSet=\"utf-8\" />\r\n          <meta\r\n            name=\"viewport\"\r\n            content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\r\n          />\r\n\r\n        </Head>\r\n        <body>\r\n          <Main />\r\n          <NextScript />\r\n        </body>\r\n      </Html>\r\n    );\r\n  }\r\n}\r\n\r\n_Document.getInitialProps = async ctx => {\r\n  // Render app and page and get the context of the page with collected side effects.\r\n  const sheets = new ServerStyleSheets();\r\n  const originalRenderPage = ctx.renderPage;\r\n\r\n  ctx.renderPage = () =>\r\n    originalRenderPage({\r\n      enhanceApp: App => props => sheets.collect(<App {...props} />)\r\n    });\r\n\r\n  const initialProps = await Document.getInitialProps(ctx);\r\n\r\n  // Check if in production\r\n  const isProduction = process.env.NODE_ENV === 'production';\r\n\r\n  return {\r\n    ...initialProps,\r\n    isProduction,\r\n    // Styles fragment is rendered after the app and page rendering finish.\r\n    styles: [\r\n      <React.Fragment key=\"styles\">\r\n        {initialProps.styles}\r\n        {sheets.getStyleElement()}\r\n      </React.Fragment>\r\n    ]\r\n  };\r\n};\r\n\r\nexport default _Document;\r\n"]},"metadata":{},"sourceType":"module"}